import os
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing import image_dataset_from_directory
import numpy as np

# Define constants
IMAGE_SIZE = (224, 224)
BATCH_SIZE = 32
DATASET_PATH = r"C:\Users\ASUS VivoBook 15\Desktop\New folder"
SAVE_PATH = r'C:\Users\ASUS VivoBook 15\Desktop\MyModelFolder'

# Create the directory if it does not exist
if not os.path.exists(SAVE_PATH):
    os.makedirs(SAVE_PATH)

# Load dataset
dataset = image_dataset_from_directory(
    DATASET_PATH,
    image_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    validation_split=0.2,
    subset="training",
    seed=123
)

# Get class names
class_names = dataset.class_names

# Normalize the pixel values
normalization_layer = layers.Rescaling(1./255)
dataset = dataset.map(lambda x, y: (normalization_layer(x), y))

# Split dataset into training and validation sets
train_size = int(len(dataset) * 0.8)
train_dataset = dataset.take(train_size)
validation_dataset = dataset.skip(train_size)

# Build the model
model = models.Sequential([
    layers.Input(shape=(IMAGE_SIZE[0], IMAGE_SIZE[1], 3)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(len(class_names), activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=5
)

# Save the trained model
model.save(os.path.join(SAVE_PATH, 'my_model.keras'))
